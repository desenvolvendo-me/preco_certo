# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/production_goals", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Api::V1::ProductionGoal. As you add validations to Api::V1::ProductionGoal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { build(:production_goal).attributes }

  let(:invalid_attributes) do
    {
      product_id: "",
      description: "",
      monthly_goal: ""
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::ProductionGoalsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe "GET /index" do
    it "renders a successful response" do
      ProductionGoal.create! valid_attributes
      get api_v1_production_goals_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      production_goal = ProductionGoal.create! valid_attributes
      get api_v1_production_goal_url(production_goal), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Api::V1::ProductionGoal" do
        expect do
          post api_v1_production_goals_url,
               params: { production_goal: valid_attributes }, headers: valid_headers, as: :json
        end.to change(ProductionGoal, :count).by(1)
      end

      it "renders a JSON response with the new api/v1_production_goal" do
        post api_v1_production_goals_url,
             params: { production_goal: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Api::V1::ProductionGoal" do
        expect do
          post api_v1_production_goals_url,
               params: { production_goal: invalid_attributes }, as: :json
        end.to change(ProductionGoal, :count).by(0)
      end

      it "renders a JSON response with errors for the new api/v1_production_goal" do
        post api_v1_production_goals_url,
             params: { production_goal: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include("application/json")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          monthly_goal: 1200
        }
      end

      it "updates the requested api/v1_production_goal" do
        production_goal = ProductionGoal.create! valid_attributes
        patch api_v1_production_goal_url(production_goal),
              params: { production_goal: new_attributes }, headers: valid_headers, as: :json
        production_goal.reload
        expect(production_goal.monthly_goal).to eq(1200)
      end

      it "renders a JSON response with the api/v1_production_goal" do
        production_goal = ProductionGoal.create! valid_attributes
        patch api_v1_production_goal_url(production_goal),
              params: { production_goal: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the api/v1_production_goal" do
        production_goal = ProductionGoal.create! valid_attributes
        patch api_v1_production_goal_url(production_goal),
              params: { production_goal: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested api/v1_production_goal" do
      production_goal = ProductionGoal.create! valid_attributes
      expect do
        delete api_v1_production_goal_url(production_goal), headers: valid_headers, as: :json
      end.to change(ProductionGoal, :count).by(-1)
    end
  end
end
